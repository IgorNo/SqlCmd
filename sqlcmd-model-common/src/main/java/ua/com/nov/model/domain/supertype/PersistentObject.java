package ua.com.nov.model.domain.supertype;

import org.springframework.data.domain.Persistable;
import org.springframework.util.Assert;

import java.io.Serializable;

/**
 * Encapsulates the behavior needed to make a single object persistent
 * and is the class from which all classes in problem/business domain inherit from.
 *
 * @param <ID> the type of the identifier
 * @author Igor Novikov
 * @since 01.11.2017
 */
public abstract class PersistentObject<ID extends Serializable> implements Persistable<ID>, Serializable {

    private static final String STATE_MUST_NOT_BE_NULL = "The given state must not be null!";

    private PObjectState state;

    /**
     * Create a new PersistentObject instance with the {@link NewState} state
     * and id equals {@literal null}.
     * This constructor is used if {@code id} is generated by storage (autoincrement)
     */
    protected PersistentObject() {
        this.state = NewState.getInstance();
    }

    /**
     * Create a new PersistentObject instance with the given state.
     *
     * @param state state of the object
     * @throws IllegalArgumentException if {@code state} is {@literal null}.
     */
    protected PersistentObject(PObjectState state) {
        this();
        Assert.notNull(state, STATE_MUST_NOT_BE_NULL);
        this.state = state;
    }

    /**
     * Return the current state of {@code PersistentObject}
     *
     * @return state of object
     */
    public PObjectState getState() {
        return state;
    }

    void setState(PObjectState state) {
        this.state = state;
    }

    @Override
    public boolean isNew() {
        return state.getClass() == NewState.class;
    }

    /**
     * Returns if the {@code PersistentObject} is proxy or 'real'
     *
     * @return if the object is proxy
     */
    public boolean isProxy() {
        return state.getClass() == ProxyState.class;
    }

    /**
     * Returns if the {@code PersistentObject} is marked for deletion
     *
     * @return if the object is marked for deletion
     */
    public boolean isMarkedForDeletion() {
        return state.getClass() == OldDeleteState.class;
    }

    /**
     * Returns if the {@code PersistentObject} is deleted from the persistence storage
     *
     * @return if the object is deleted
     */
    public boolean isDeleted() {
        return state.getClass() == DeletedState.class;
    }

    /**
     * Fix all changes of this persistence object into persistence storage
     */
    public void commit() {
        state.commit(this);
    }

    /**
     * Reset all changes and refresh all of the objectâ€™s attributes from persistence storage
     */
    public void rollback() {
        state.rollback(this);
    }

    /**
     * Mark the object for deletion
     */
    public void delete() {
        state.delete(this);
    }

    /**
     * Retrieve the full version of the object from persistence storage
     */
    public void retrieve() {
        state.retrieve(this);
    }

    /**
     * Mark the object for saving
     */
    public void save() {
        state.save(this);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof PersistentObject)) return false;

        PersistentObject<?> that = (PersistentObject<?>) o;

        return getId().equals(that.getId());
    }

    @Override
    public int hashCode() {
        return getId() != null ? getId().hashCode() : 0;
    }
}

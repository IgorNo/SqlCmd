package ua.com.nov.model.entity.metadata.database;

import ua.com.nov.model.entity.metadata.datatype.DataType;
import ua.com.nov.model.entity.metadata.datatype.JdbcDataTypes;
import ua.com.nov.model.entity.metadata.table.Table;
import ua.com.nov.model.entity.metadata.table.column.Column;
import ua.com.nov.model.statement.AbstractColumnSqlStatements;
import ua.com.nov.model.statement.AbstractMetaDataSqlStatements;
import ua.com.nov.model.statement.SqlStatement;

import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

public class HyperSqlDb extends Database {

    public HyperSqlDb(String dbUrl, String dbName) {
        super(dbUrl, dbName, null);
        getTypesMap().put(JdbcDataTypes.LONGVARCHAR, "LONGVARCHAR");
        List<DataType> dataTypeList = new ArrayList<>();
        dataTypeList.add(new DataType.Builder("LONGVARCHAR", Types.LONGVARCHAR).build());
        addDataTypes(dataTypeList);
    }

    @Override
    public String getAutoIncrementDefinition() {
        return " GENERATED BY DEFAULT AS IDENTITY";
    }

    @Override
    public String getFullTableName(Table.Id id) {
        StringBuilder result = new StringBuilder();
        if (id.getSchema() != null) result.append(id.getSchema()).append('.');
        return result.append(id.getName()).toString();
    }

    @Override
    public String convert(String parameter) {
        if (parameter != null) return parameter.toUpperCase();
        return parameter;
    }

    @Override
    public AbstractMetaDataSqlStatements getDatabaseSqlStmtSource() {
        return new AbstractMetaDataSqlStatements<Database.Id, Database, Database>() {
            @Override
            public SqlStatement getCreateStmt(Database value) {
                throw new UnsupportedOperationException();
            }

            @Override
            public SqlStatement getUpdateStmt(Database value) {
                throw new UnsupportedOperationException();
            }

            @Override
            public SqlStatement getDeleteStmt(Database.Id key) {
                throw new UnsupportedOperationException();
            }

        };
    }

    @Override
    public AbstractColumnSqlStatements getColumnSqlStmtSource() {
        return new AbstractColumnSqlStatements() {
            @Override
            public SqlStatement getUpdateStmt(Column col) {
                return new SqlStatement.Builder(String.format("ALTER TABLE %s ALTER COLUMN %s RENAME TO %s",
                        col.getTableId().getFullName(), col.getName(), col.getNewName())).build();
            }
        };
    }

}

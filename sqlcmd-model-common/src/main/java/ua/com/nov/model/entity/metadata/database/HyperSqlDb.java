package ua.com.nov.model.entity.metadata.database;

import ua.com.nov.model.entity.metadata.datatype.DataType;
import ua.com.nov.model.entity.metadata.datatype.JdbcDataTypes;
import ua.com.nov.model.entity.metadata.table.Column;
import ua.com.nov.model.entity.metadata.table.TableId;
import ua.com.nov.model.entity.metadata.table.constraint.ForeignKey;
import ua.com.nov.model.entity.metadata.table.constraint.PrimaryKey;
import ua.com.nov.model.entity.metadata.table.constraint.UniqueKey;
import ua.com.nov.model.statement.AbstractColumnSqlStatements;
import ua.com.nov.model.statement.AbstractConstraintSqlStatements;
import ua.com.nov.model.statement.AbstractDbSqlStatements;
import ua.com.nov.model.statement.AbstractTableSqlStatements;

import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

public class HyperSqlDb extends Database {

    public HyperSqlDb(String dbUrl, String userName) {
        this(dbUrl, userName, null);
    }

    public HyperSqlDb(String dbUrl, String userName, String password) {
        this(dbUrl, userName, password, "");
    }

    public HyperSqlDb(String dbUrl, String userName, String password, String dbProperties) {
        super(dbUrl, userName, password, dbProperties);
        getTypesMap().put(JdbcDataTypes.LONGVARCHAR, "LONGVARCHAR");
        List<DataType> dataTypeList = new ArrayList<>();
        dataTypeList.add(new DataType.Builder("LONGVARCHAR", Types.LONGVARCHAR).build());
        addDataTypes(dataTypeList);
    }

    @Override
    public String getAutoIncrementDefinition() {
        return " GENERATED BY DEFAULT AS IDENTITY";
    }

    @Override
    public String getFullTableName(TableId id) {
        StringBuilder result = new StringBuilder();
        if (id.getSchema() != null) result.append(id.getSchema()).append('.');
        return result.append(id.getName()).toString();
    }

    @Override
    public String convert(String parameter) {
        if (parameter != null) return parameter.toUpperCase();
        return parameter;
    }
    @Override
    public String getDbProperties() {
        return "";
    }

    @Override
    public AbstractDbSqlStatements getDatabaseSqlStmtSource() {
        return new AbstractDbSqlStatements() {
            @Override
            public String getCreateStmt(Database db) {
                throw new UnsupportedOperationException();
            }

            @Override
            public String getDeleteStmt(DbId dbId) {
                throw new UnsupportedOperationException();
            }
        };
    }

    @Override
    public AbstractTableSqlStatements getTableSqlStmtSource() {
        return new AbstractTableSqlStatements() {
        };
    }

    @Override
    public AbstractColumnSqlStatements getColumnSqlStmtSource() {
        return new AbstractColumnSqlStatements() {
            @Override
            public String getUpdateStmt(Column col) {
                return String.format("ALTER TABLE %s ALTER COLUMN %s RENAME TO %s",
                        col.getTableId().getFullName(), col.getName(), col.getNewName());
            }
        };
    }

    @Override
    public AbstractConstraintSqlStatements<PrimaryKey> getPrimaryKeySqlStmtSource() {
        return new AbstractConstraintSqlStatements<PrimaryKey>(){};
    }

    @Override
    public AbstractConstraintSqlStatements<ForeignKey> getForeignKeySqlStmtSource() {
        return new AbstractConstraintSqlStatements<ForeignKey>(){};
    }

    @Override
    public AbstractConstraintSqlStatements<UniqueKey> getUniqueKeySqlStmtSource() {
        return new AbstractConstraintSqlStatements<UniqueKey>() {};
    }
}
